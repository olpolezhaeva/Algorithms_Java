import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Order;import org.junit.jupiter.api.Test;public class Arrays_hw9Test {    //1. ??????? ???????? OddEven, ??????? ????????? ?? ???? ????? ?????, ?????????? ?Odd?,    // ???? ????? ????????, ? ?Even?, ???? ????? ??????. ?? ???? ????????? ??????? ????????? ????? ?Undefined?.    Arrays_hw9 hw9;    @BeforeEach    void setUp() {        hw9 = new Arrays_hw9();    }    @Order(1)    @Test    public void testOddEvenAlgorithmHappyPath() {        int i = 345;        String expectedResult = "Odd";        String actualResult = hw9.oddEvenAlgorithm(i);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testOddEvenAlgorithmHappyPathZero() {        int i = 0;        String expectedResult = "Even";        String actualResult = hw9.oddEvenAlgorithm(i);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testOddEvenAlgorithmHappyPath_222222() {        int i = 222222;        String expectedResult = "Even";        String actualResult = hw9.oddEvenAlgorithm(i);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testOddEvenAlgorithmHappyPathIntegerMAX_VALUEPlus1() {        int i = 2147483647 + 1;        String expectedResult = "Undefined";        String actualResult = hw9.oddEvenAlgorithm(i);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testOddEvenAlgorithmHappyPathIntegerMIN_VALUEMinus1() {        int i = -2147483648 - 1;        String expectedResult = "Undefined";        String actualResult = hw9.oddEvenAlgorithm(i);        Assertions.assertEquals(expectedResult, actualResult);    }    //negative    @Order(2)    @Test    public void testOddEvenAlgorithmNegativeNumber() {        int i = -1;        String expectedResult = "Odd";        String actualResult = hw9.oddEvenAlgorithm(i);        Assertions.assertEquals(expectedResult, actualResult);    }    //2 ???????? ???????? OddIndices, ??????? ????????? ?????? ?????,  ? ?????????? ?????? ???????? ???????? ????????    //Test Data:    //Input = {-45, 590, 234, 985, 12, 68}    //Expected Result =  {590, 985, 68}    @Order(3)    @Test    public void testOddIndexesHappyPath() {        int[] array = new int[]{-45, 590, 234, 985, 12, 68};        int[] expectedResult = {590, 985, 68};        int[] actualResult = hw9.oddIndixes(array);        Assertions.assertArrayEquals(expectedResult, actualResult);    }    @Test    public void testOddIndexesEmptyArray() {        int[] array = new int[]{};        int[] expectedResult = {};        int[] actualResult = hw9.oddIndixes(array);        //System.out.println(Arrays.toString(actualResult));        Assertions.assertArrayEquals(expectedResult, actualResult);    }    //3 ???????? ???????? SumArray, ??????? ?????????? ????? ???? ????? ???????    //    //Test Data:    //{0, 1, 2, 3, 4, 5} ? 15    //{-7, -3} ? -10    @Test    public void testSumArrayHappyPath() {        int[] array = new int[]{0, 1, 2, 3, 4, 5};        int expectedResult = 15;        int actualResult = hw9.sumArray(array);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testSumArrayHappyPathNegativeNumbers() {        int[] array = new int[]{-7, -3};        int expectedResult = -10;        int actualResult = hw9.sumArray(array);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testSumArrayEmpty() {        int[] array = new int[]{};        int expectedResult = 0;        int actualResult = hw9.sumArray(array);        Assertions.assertEquals(expectedResult, actualResult);    }    //4. ???????? ???????? BiggerValue, ??????? ?? ???? ?????????? ???? int ?????????? ??????? ????????.    //Test Data:    //3333, 9999    //Expected Result = 9999    @Test    public void testBiggerValueHappyPath() {        int x = 3333;        int y = 9999;        int expectedResult = 9999;        int actualResult = hw9.biggerValue(x, y);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testBiggerValueHappyPathNegativeNumbers() {        int x = -3333;        int y = -9999;        int expectedResult = -3333;        int actualResult = hw9.biggerValue(x, y);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testBiggerValueEquals() {        int x = -3333;        int y = -3333;        int expectedResult = -3333;        int actualResult = hw9.biggerValue(x, y);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testBiggerValueIntegerMaxValue() {        int x = Integer.MAX_VALUE + 1;        int y = -3333;        int expectedResult = -3333;        int actualResult = hw9.biggerValue(x, y);        Assertions.assertEquals(expectedResult, actualResult);    }    //5.???????? ???????? IsPositiveNumber, ??????? ?????????? true,    //    // ???? ?????????  ???????? ?????? ??? ????? ????, ? ?????????? false, ???? ???????? ?????? 0.    //    //????????? ?????? ?????? ?? ?????? 555, 0 ? -555.    @Test    public void testIsPositiveNumberHappyPath() {        int x = 555;        boolean expectedResult = true;        boolean actualResult = hw9.isPositiveNumber(x);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testIsPositiveNumberHappyPathZero() {        int x = 0;        boolean expectedResult = true;        boolean actualResult = hw9.isPositiveNumber(x);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testIsPositiveNumberNegative() {        int x = -555;        boolean expectedResult = false;        boolean actualResult = hw9.isPositiveNumber(x);        Assertions.assertEquals(expectedResult, actualResult);    }    //6 ???????? ???????? AreNumbersEqual, ??????? ????????? ?? ???? 2 ????? int ?????, ? ??????????    //0, ???? ????? ?????    // -1, ???? ?????? ????? ?????? ???????    //1, ???? ?????? ????? ?????? ???????//    Test Data://            89, 89//    Expected result: 0//            -89, 89//    Expected result: -1//            89, -89//    Expected result: 1    @Test    public void testAreNumbersEqualHappyPath() {        int x = 89;        int y = 89;        int expectedResult = 0;        int actualResult = hw9.areNumbersEqual(x, y);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testAreNumbersEqualHappyPath_1() {        int x = -89;        int y = 89;        int expectedResult = -1;        int actualResult = hw9.areNumbersEqual(x, y);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testAreNumbersEqualHappyPath_2() {        int x = 89;        int y = -89;        int expectedResult = 1;        int actualResult = hw9.areNumbersEqual(x, y);        Assertions.assertEquals(expectedResult, actualResult);    }    //7.    ??? ?????? ????? M ????????? ????????? ???????? ????????:////    ???? M ?????? 3 ? 5, ?? ??????? "??????? ?????".////    ???? M ?????? ?????? 3, ?? ?? 5, ?? ??????? "?????? ?????".////    ???? M ?????? ?????? 5 ? ?? ?????? 3, ?? ???????????? "?????? ?????".////    ???? M ?? ????????????? ?? ?????? ?? ????????????????? ???????, ?? ???????????? "-1".    @Test    public void testGoodBAdPoorNumberHappyPath() {        int m = 15;        String expectedResult = "Good Number";        String actualResult = hw9.goodBAdPoorNumber(m);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testGoodBAdPoorNumberHappyPath_1() {        int m = 12;        String expectedResult = "Bad Number";        String actualResult = hw9.goodBAdPoorNumber(m);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testGoodBAdPoorNumberHappyPath_2() {        int m = 10;        String expectedResult = "Poor Number";        String actualResult = hw9.goodBAdPoorNumber(m);        Assertions.assertEquals(expectedResult, actualResult);    }    @Test    public void testGoodBAdPoorNumberHappyPath_3() {        int m = 1999;        String expectedResult = "-1";        String actualResult = hw9.goodBAdPoorNumber(m);        Assertions.assertEquals(expectedResult, actualResult);    }    //8 ???????? ???????? MinMaxAve, ??????? ????????? ?????? ????? int[]  ? 2 ???????? ????????.    // ???????? ?????????? ??????, ??????? ???????? ??????????? ????????, ???????????? ????????,    // ? ??????? ????? ???? ???????? ????? 2-?? ?????????.    //    //Test Data:    //({1, 2, 3, 4, 5, 6, 7, 8}, 2, 6) ?  {3, 7, 5}    @Test    public void testMinMaxAveHappyPath() {        int[] array = new int[]{1, 2, 3, 4, 5, 6, 7, 8};        int k = 2;        int j = 6;        int[] expectedResult = new int[]{3, 7, 5};        int[] actualResult = hw9.minMaxAve(array, k, j);        Assertions.assertArrayEquals(expectedResult, actualResult);    }    @Test    public void testMinMaxAveHappyPath_1() {        int[] array = new int[]{1, -2, 3, 4, 0, 6, 7, 8};        int k = 0;        int j = 1;        int[] expectedResult = new int[]{-2, 1, 0};        int[] actualResult = hw9.minMaxAve(array, k, j);        Assertions.assertArrayEquals(expectedResult, actualResult);    }    @Test    public void testMinMaxAveHappyPathNegativeIndex() {        int[] array = new int[]{1, -2, 3, 4, 0, 6, 7, 8};        int k = -1;        int j = 1;        int[] expectedResult = new int[]{};        int[] actualResult = hw9.minMaxAve(array, k, j);        Assertions.assertArrayEquals(expectedResult, actualResult);    }    @Test    public void testMinMaxAveHappyPathEmptyArray() {        int[] array = new int[]{};        int k = -1;        int j = 1;        int[] expectedResult = new int[]{};        int[] actualResult = hw9.minMaxAve(array, k, j);        Assertions.assertArrayEquals(expectedResult, actualResult);    }    @Test    public void testMinMaxAveHappyPathZeroIndexes() {        int[] array = new int[]{1, -2, 3, 4, 0, 6, 7, 8};        int k = 0;        int j = 0;        int[] expectedResult = new int[]{1, 1, 1};        int[] actualResult = hw9.minMaxAve(array, k, j);        Assertions.assertArrayEquals(expectedResult, actualResult);    }    //9.???????? ???????? Intersection, ??????? ????????? ?? ???? 2 ??????? ????? ?????    // ? ?????????? ?????? ????? ?????????.    //Test Data:    //{1, 2, 4, 5, 89}, {8, 9, 4, 2} ? {2, 4}    //{1, 2, 4, 5, 8, 9}, {8, 9, -4, -2} ? {8, 9}    //{1, 2, 4, 5, 89}, {8, 9, 45} ? {}    @Test    public void testIntersectionHappyPath(){        int[] arr1 = new int[]{1, 2, 4, 5, 89};        int[] arr2 = new int []{8, 9, 4, 2};        int[] expectedResult = new int[]{2, 4};        int[] actualResult = hw9.intersection(arr1, arr2);        Assertions.assertArrayEquals(actualResult,expectedResult);    }    @Test    public void testIntersectionHappyPath1(){        int[] arr1 = new int[]{1, 2, 4, 5, 8, 9};        int[] arr2 = new int []{8, 9, -4, -2};        int[] expectedResult = new int[]{8, 9};        int[] actualResult = hw9.intersection(arr1, arr2);        Assertions.assertArrayEquals(actualResult,expectedResult);    }    @Test    public void testIntersectionHappyPath2(){        int[] arr1 = new int[]{1, 2, 4, 5, 89};        int[] arr2 = new int []{8, 9, 45};        int[] expectedResult = new int[]{};        int[] actualResult = hw9.intersection(arr1, arr2);        Assertions.assertArrayEquals(actualResult,expectedResult);    }    @Test    public void testIntersectionHappyPath3(){        int[] arr1 = new int[]{1, 2, 4, 5, 89};        int[] arr2 = new int []{1,1, 2, 45};        int[] expectedResult = new int[]{1,1,2}; //?????? ????????? ??? ????????????? ????????? ??? ?????        int[] actualResult = hw9.intersection(arr1, arr2);        Assertions.assertArrayEquals(actualResult,expectedResult);    }}